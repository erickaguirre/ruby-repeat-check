#!/usr/bin/ruby

require 'time'
require 'thread'
require 'fileutils'

$:.unshift File.join(File.dirname(__FILE__), 'lib')
require 'escape'

STDOUT.sync = true

$ltsv_log = open("z.log.ltsv", "a")
$ltsv_log.sync = true

def log(reason, fmt, param={})
  t = Time.now
  msg = fmt.gsub(/\{([^{}]+)\}/) { param.fetch($1) }
  print "#{t.iso8601} #{msg}\n"
  h = { "time"=>t.iso8601, "reason"=>reason }
  param.each {|k, v|
    h[k.to_s] = v.to_s
  }
  ltsv_line = Escape.ltsv_line(h)
  $ltsv_log.print ltsv_line
end

def init_queue
  $build_queue = Queue.new
  $check_queue = Queue.new
  $all_dirs = []
  Dir.glob("*/ruby").sort.each {|ruby_dir|
    dir = File.dirname(ruby_dir)
    $build_queue.enq dir
    $all_dirs << dir
  }
end

def build_loop
  build_status = {}
  loop {
    dir = $build_queue.deq
    ruby_dir = "#{dir}/ruby"
    svn_log_xml = IO.popen(%w[svn log --xml -r BASE:HEAD -l 2] +
                           [:chdir => ruby_dir]) {|f| f.read }
    if $?.success?
      revs = svn_log_xml.scan(/<logentry\s+revision="([0-9]+)">/).map {|r,| r.to_i }
    else
      revs = []
    end
    if revs.length == 0
      svn_info_xml = IO.popen(%w[svn info --xml] +
                              [:chdir => ruby_dir]) {|f| f.read }
      cur_rev, = svn_info_xml.scan(/<commit\s+revision="(\d+)">/).map {|r,| r.to_i }
      log 'svn_log_failure', '{dir}: could not check new revision: r{rev}', "dir"=>dir, "rev"=>cur_rev
      sleep 600
    elsif revs.length == 1
      cur_rev = max_rev = revs[0]
      bs = !build_status.has_key?([dir, max_rev]) ? 'not built yet' : build_status[[dir, max_rev]] ? 'already succeed' : 'already failed'
      log 'headrev', '{dir}: no new revision: r{rev} (HEAD) {build_status}', "dir"=>dir, "rev"=>max_rev, "build_status"=>bs
      if $all_dirs.all? {|dir2| build_status.has_key?([dir2, max_rev]) && !build_status[[dir2, max_rev]] }
        log 'build_failure_all', 'all directories build failed.  sleep 10 minutes.'
        sleep 600
      end
    else
      cur_rev, max_rev = revs
      log 'newrev', '{dir}: new revision: r{old_rev} -> r{new_rev}', "dir"=>dir, "old_rev"=>cur_rev, "new_rev"=>max_rev
    end
    if cur_rev != max_rev || !build_status.has_key?([dir, max_rev])
      t1 = Time.now
      t1_str = t1.getutc.strftime("%Y%m%dT%H%M%SZ")
      build_log = "#{dir}/out/r#{max_rev}/#{t1_str}.build.log"
      FileUtils.mkpath File.dirname(build_log)
      command = "make SVNUPOPTIONS=-r#{max_rev} up all install"
      log 'build_command', '{dir}: {rev} {command}', "dir"=>dir, "rev"=>max_rev, "command"=>command
      if system(command, :chdir=>ruby_dir, [:out, :err] => [build_log, "w"])
        build_result = 'success'
        build_status[[dir, max_rev]] = true
      else
        build_result = 'failure'
        build_status[[dir, max_rev]] = false
      end
      log 'build_result', '{dir}: r{rev} build {result}', "dir"=>dir, "rev"=>max_rev, "result"=>build_result
    end
    if build_status[[dir, max_rev]]
      $check_queue.enq dir
    else
      $build_queue.enq dir
    end
  }
end

def check_loop
  loop {
    dir = $check_queue.deq
    log 'repeat_check', '{dir}: repeat check', "dir"=>dir
    system("./repeat-check", dir, '18', '9')
    log 'clean_check', '{dir}: clean check', "dir"=>dir
    system("./clean-check", dir)
    $build_queue.enq dir
  }
end

init_queue
build_thread = Thread.new { build_loop }
check_thread = Thread.new { check_loop }

build_thread.join
check_thread.join
